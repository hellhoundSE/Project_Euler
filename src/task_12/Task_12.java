package task_12;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Task_12 {

	public static void main(String[] args) {

		/*
		 * The sequence of triangle numbers is generated by adding the natural numbers. 
		 * So the 7th triangle number would be 
		 * 
		 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
		 * 
		 * The first ten terms would be:
		 * 
		 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		 * 
		 * Let us list the factors of the first seven triangle numbers:
		 * 
		 *  1: 1
		 *  3: 1,3
			 6: 1,2,3,6
			10: 1,2,5,10
			15: 1,3,5,15
			21: 1,3,7,21
			28: 1,2,4,7,14,28
			
			We can see that 28 is the first triangle number to have over five divisors.

			What is the value of the first triangle number to have over five hundred divisors?
			
		 */
		int amountOfDivisors = 500;

	    System.out.println(findTriangleNumber(amountOfDivisors));
	}
	

	private static int findTriangleNumber(int amountOfDivisors) {
		
		int number = 2;
		int sum = 3;
		
		while(true) {
			if(findAountOfDividers(sum) >= amountOfDivisors) {
				return sum;
			}
			number++;
			sum+=number;
		}
	}

	private static int findAountOfDividers(int number) {

		Map<Integer,Integer> map = new HashMap<Integer,Integer>();
		
		// map contains prime numbers which out numbers consists of
		// value in a map it is a power for each prime number
		
		
		//loop which fills map
		for(int i = 2; i<= number ;i++) {
			if(number%i==0) {
				number/=i;
				if(map.containsKey(i))
					map.put(i,map.get(i)+1);
				else
					map.put(i,1);
				i--;
			}
		}		
		//we can get amount of dividers by multiplying all powers of prime numbers + 1
		
		//for example
		//D(28) = 1,2,4,7,14,28 = 6 dividers
		
		// prime numbers are
		// 2^2 and 7^1 so
		//D(28) = (2+1)*(1+1)
		
		int amountOfDividers = 1;
		for(int i : map.keySet()) {
			amountOfDividers*=(map.get(i)+1);
		}
		
		return amountOfDividers;
	}

}
