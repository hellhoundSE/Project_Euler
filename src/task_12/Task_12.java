package task_12;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Task_12 {

	public static void main(String[] args) {

		/*
		 * The sequence of triangle numbers is generated by adding the natural numbers. 
		 * So the 7th triangle number would be 
		 * 
		 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
		 * 
		 * The first ten terms would be:
		 * 
		 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
		 * 
		 * Let us list the factors of the first seven triangle numbers:
		 * 
		 *  1: 1
		 *  3: 1,3
			 6: 1,2,3,6
			10: 1,2,5,10
			15: 1,3,5,15
			21: 1,3,7,21
			28: 1,2,4,7,14,28
			
			We can see that 28 is the first triangle number to have over five divisors.

			What is the value of the first triangle number to have over five hundred divisors?
			
		 */
		int amountOfDivisors = 500;

	    long startTime = System.currentTimeMillis();

	    findTriangleNumber(amountOfDivisors);
	    System.out.println(System.currentTimeMillis() - startTime);
	}
	

	private static int findTriangleNumber(int amountOfDivisors) {
		
		int number = 2;
		long sum = 3;
		
		while(true) {
			int am = findAountOfDividers(sum);
			//System.out.println(number+"	"+sum+"	"+am);
			
			if(am >= amountOfDivisors) {
				//System.out.println(number+"	"+sum+"	"+findAountOfDividers(sum));
				return number;
			}
			number++;
			sum+=number;
		}
	}

	private static int findAountOfDividers(long number) {

		Map<Integer,Integer> map = new HashMap<Integer,Integer>();
				
		for(int i = 2; i<= number ;i++) {
			if(number%i==0) {
				number/=i;
				if(map.containsKey(i))
					map.put(i,map.get(i)+1);
				else
					map.put(i,2);
				i--;
			}
		}
		int result = 1;
		for(int i : map.keySet()) {
			result*=map.get(i);
		}
		return result;
	}

}
